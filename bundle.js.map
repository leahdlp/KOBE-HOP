{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ball.js","webpack:///./src/game.js","webpack:///./src/index.js","webpack:///./src/level.js","webpack:///./src/player.js"],"names":["Ball","DoodleJump","canvas","ctx","getContext","dimensions","width","height","balls","hoops","defenders","registerEvents","restart","console","log","running","animate","score","player","Player","level","Level","boundKeyStrokeHandler","keyStroke","bind","document","addEventListener","e","keyCode","play","movePlayer","outOfBounds","gameOver","alert","landedPlatform","bounds","collidesWith","drawScore","requestAnimationFrame","loc","x","y","font","fillStyle","fillText","strokeStyle","lineWidth","strokeText","game_canv","getElementById","bg_canv","game","Game","CONSTANTS","GAP_HEIGHT","GAP_WIDTH","PLATFORM_HEIGHT","PLATFORM_WIDTH","EDGE_BUFFER","PLATFORM_SPACING","firstPlatformLocation","int","getRandomInt","platforms","randomPlatform","max","Math","floor","random","location","heightRange","spaceRange","platform","left","right","top","bottom","landed","drawBackground","drawPlatforms","movePlatform","background","Image","onload","drawImage","callback","eachPlatform","PLATFORM_SPEED","shift","newX","platformss","newY","push","fillRect","forEach","_overlap","object","objLeftOnPlat","objRightOnPlat","objTopAbovePlatBot","objBotOnPlatTop","collision","GRAVITY","JUMP_SPEED","FALL_SPEED","TERMINAL_VEL","PLAYER_WIDTH","PLAYER_HEIGHT","vel","dir","jump","setInterval","abs","drawPlayer","belowTheBottom","ball"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;;;;;IClFqBA,I,GACjB,gBAAc,CACV;AACA;;AAFU;AAGb,C;;;;;;;;;;;;;;;;;;;;;;;;ACJL;AACA;;IAEqBC,U;AACnB,sBAAYC,MAAZ,EAAoB;AAAA;;AAClB,SAAKC,GAAL,GAAWD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAX;AACA,SAAKC,UAAL,GAAkB;AAAEC,WAAK,EAAEJ,MAAM,CAACI,KAAhB;AAAuBC,YAAM,EAAEL,MAAM,CAACK;AAAtC,KAAlB,CAFkB,CAGlB;AACA;;AAEA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,SAAL,GAAiB,EAAjB;AAEA,SAAKC,cAAL;AACA,SAAKC,OAAL;AACAC,WAAO,CAACC,GAAR,CAAY,aAAZ;AACD;;;;2BAEM;AACLD,aAAO,CAACC,GAAR,CAAY,MAAZ;AACA,WAAKC,OAAL,GAAe,IAAf,CAFK,CAIL;;AACA,WAAKC,OAAL;AACD;;;8BAES;AACRH,aAAO,CAACC,GAAR,CAAY,SAAZ;AACA,WAAKC,OAAL,GAAe,KAAf;AACA,WAAKE,KAAL,GAAa,CAAb;AACA,WAAKC,MAAL,GAAc,IAAIC,+CAAJ,CAAW,KAAKd,UAAhB,CAAd;AACA,WAAKe,KAAL,GAAa,IAAIC,8CAAJ,CAAU,KAAKhB,UAAf,CAAb;AAEA,WAAKW,OAAL;AACD;;;qCAEgB;AACfH,aAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAKQ,qBAAL,GAA6B,KAAKC,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAA7B;AACAC,cAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqC,KAAKJ,qBAA1C;AACD;;;8BAESK,C,EAAG;AACXd,aAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAIc,OAAO,GAAGD,CAAC,CAACC,OAAhB,CAFW,CAGX;;AACA,UAAI,CAAC,KAAKb,OAAV,EAAmB,KAAKc,IAAL;;AAEnB,cAAQD,OAAR;AACE,aAAK,EAAL;AACE;AACA;;AACF,aAAK,EAAL;AACE;AACA,eAAKV,MAAL,CAAYY,UAAZ,CAAuB,MAAvB;AACA;;AACF,aAAK,EAAL;AACE,eAAKZ,MAAL,CAAYY,UAAZ,CAAuB,IAAvB;AACA;;AACF,aAAK,EAAL;AACE;AACA,eAAKZ,MAAL,CAAYY,UAAZ,CAAuB,OAAvB;AACA;;AACF,aAAK,EAAL;AACE,eAAKZ,MAAL,CAAYY,UAAZ,CAAuB,MAAvB;AACA;;AACF;AACE;AACA;AApBJ,OANW,CA6BX;;AACD;;;+BAEU;AACT,aACE,KAAKZ,MAAL,CAAYa,WAAZ,EADF;AAGD,K,CAED;AACA;AACA;AACA;;;;8BACU;AAAA;;AACRlB,aAAO,CAACC,GAAR,CAAY,SAAZ,EADQ,CAER;;AACAD,aAAO,CAACC,GAAR,CAAY,eAAZ;AACA,WAAKM,KAAL,CAAWJ,OAAX,CAAmB,KAAKb,GAAxB,EAJQ,CAKR;;AACAU,aAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAKI,MAAL,CAAYF,OAAZ,CAAoB,KAAKb,GAAzB,EAPQ,CAQR;;AACA,UAAI,KAAK6B,QAAL,EAAJ,EAAqB;AACnBnB,eAAO,CAACC,GAAR,CAAY,WAAZ;AACAmB,aAAK,CAAC,KAAKhB,KAAN,CAAL;AACA,aAAKL,OAAL;AACD,OAbO,CAeR;;;AACA,WAAKQ,KAAL,CAAWc,cAAX,CAA0B,KAAKhB,MAAL,CAAYiB,MAAZ,EAA1B,EAAgD,YAAM;AACpD,aAAI,CAAClB,KAAL,IAAc,CAAd;;AACA,aAAI,CAACC,MAAL,CAAYY,UAAZ,CAAuB,IAAvB;;AACAjB,eAAO,CAACC,GAAR,CAAY,KAAI,CAACG,KAAjB;AACD,OAJD;;AAMA,UAAI,KAAKG,KAAL,CAAWgB,YAAX,CAAwB,KAAKlB,MAAL,CAAYiB,MAAZ,EAAxB,CAAJ,EAAmD;AACjDtB,eAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,aAAKI,MAAL,CAAYY,UAAZ,CAAuB,IAAvB;AACD,OAzBO,CA2BR;;;AACAjB,aAAO,CAACC,GAAR,CAAY,YAAZ;AACA,WAAKuB,SAAL,GA7BQ,CA+BR;;AACA,UAAI,KAAKtB,OAAT,EAAkB;AAChBF,eAAO,CAACC,GAAR,CAAY,oCAAZ,EADgB,CAEhB;;AACAwB,6BAAqB,CAAC,KAAKtB,OAAL,CAAaQ,IAAb,CAAkB,IAAlB,CAAD,CAArB;AACD;AACF;;;gCAEW;AACVX,aAAO,CAACC,GAAR,CAAY,YAAZ,EADU,CAEV;;AACA,UAAMyB,GAAG,GAAG;AAAEC,SAAC,EAAI,IAAI,KAAKnC,UAAL,CAAgBC,KAAtB,GAA+B,CAApC;AAAuCmC,SAAC,EAAE,KAAKpC,UAAL,CAAgBE,MAAhB,GAAyB;AAAnE,OAAZ;AACA,WAAKJ,GAAL,CAASuC,IAAT,GAAgB,iBAAhB;AACA,WAAKvC,GAAL,CAASwC,SAAT,GAAqB,OAArB;AACA,WAAKxC,GAAL,CAASyC,QAAT,CAAkB,KAAK3B,KAAvB,EAA8BsB,GAAG,CAACC,CAAlC,EAAqCD,GAAG,CAACE,CAAzC;AACA,WAAKtC,GAAL,CAAS0C,WAAT,GAAuB,OAAvB;AACA,WAAK1C,GAAL,CAAS2C,SAAT,GAAqB,CAArB;AACA,WAAK3C,GAAL,CAAS4C,UAAT,CAAoB,KAAK9B,KAAzB,EAAgCsB,GAAG,CAACC,CAApC,EAAuCD,GAAG,CAACE,CAA3C;AACD;;;;KAEH;;;;;;;;;;;;;;;ACxIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEAhB,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8C,YAAY;AACxD,MAAMsB,SAAS,GAAGvB,QAAQ,CAACwB,cAAT,CAAwB,aAAxB,CAAlB;AACA,MAAMC,OAAO,GAAGzB,QAAQ,CAACwB,cAAT,CAAwB,WAAxB,CAAhB,CAFwD,CAGxD;AACA;AACA;;AACA,MAAME,IAAI,GAAG,IAAIC,6CAAJ,CAASJ,SAAT,EAAoBE,OAApB,CAAb,CANwD,CAOxD;AACA;AACA;AACE;AACF;AAEA;AACD,CAdD,E,CAkrVA,IAAMG,SAAS,GAAG;AAClB;AACEC,YAAU,EAAE,GAFI;AAGhBC,WAAS,EAAE,EAHK;AAIhBC,iBAAe,EAAE,EAJD;AAKhBC,gBAAc,EAAE,GALA;AAMhBC,aAAW,EAAE,EANG;AAOhBC,kBAAgB,EAAE,CAAC,GAAD,EAAM,GAAN,CAPF,CAQlB;;AARkB,CAAlB,C,CAWA;;IAEqBtC,K;AACnB,iBAAYhB,UAAZ,EAAwB;AAAA;;AACtBQ,WAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,SAAKT,UAAL,GAAkBA,UAAlB;AAEA,QAAMuD,qBAAqB,GAAG,CAC1B;AACA;AACA;AACA;AAEC,QAAI,KAAKvD,UAAL,CAAgBC,KAArB,GAA8B,CANJ,EAOzB,IAAI,KAAKD,UAAL,CAAgBE,MAArB,GAA+B,CAPL,CAA9B,CAJsB,CAatB;;AACA,QAAMsD,IAAG,GAAG,KAAKC,YAAjB;AAEAjD,WAAO,CAACC,GAAR,CAAY8C,qBAAZ;AAEA,SAAKG,SAAL,GAAiB,CACf,KAAKC,cAAL,CAAoBJ,qBAApB,CADe,EAEf,KAAKI,cAAL,CACE,CACEJ,qBAAqB,CAAC,CAAD,CAArB,GAA2BP,SAAS,CAACM,gBAAV,CAA2B,CAA3B,IAAgCE,IAAG,CAAC,CAAD,CADhE,EAEED,qBAAqB,CAAC,CAAD,CAArB,GAA2BP,SAAS,CAACM,gBAAV,CAA2B,CAA3B,IAAgCE,IAAG,CAAC,CAAD,CAFhE,CADF,CAFe,EAQf,KAAKG,cAAL,CACE,CACEJ,qBAAqB,CAAC,CAAD,CAArB,GAA2BP,SAAS,CAACM,gBAAV,CAA2B,CAA3B,IAAgCE,IAAG,CAAC,CAAD,CADhE,EAEED,qBAAqB,CAAC,CAAD,CAArB,GAA2BP,SAAS,CAACM,gBAAV,CAA2B,CAA3B,IAAgCE,IAAG,CAAC,CAAD,CAFhE,CADF,CARe,EAcf,KAAKG,cAAL,CACE,CACEJ,qBAAqB,CAAC,CAAD,CAArB,GAA2BP,SAAS,CAACM,gBAAV,CAA2B,CAA3B,IAAgCE,IAAG,CAAC,CAAD,CADhE,EAEED,qBAAqB,CAAC,CAAD,CAArB,GAA2BP,SAAS,CAACM,gBAAV,CAA2B,CAA3B,IAAgCE,IAAG,CAAC,CAAD,CAFhE,CADF,CAde,CAAjB;AAqBAhD,WAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8B,KAAKiD,SAAnC;AACD;;;;iCAEYE,G,EAAK;AAChB,UAAMJ,KAAG,GAAGK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAWF,GAAX,CAA3B,CAAZ;;AAEA,UAAIJ,KAAG,KAAK,CAAZ,EAAe,OAAO,CAAP;AACf,aAAOA,KAAP;AACD;;;mCAEcQ,Q,EAAU;AACvBxD,aAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,aAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBuD,QAAxB;AACA,UAAMC,WAAW,GACfJ,IAAI,CAACC,KAAL,CAAW,KAAK9D,UAAL,CAAgBE,MAA3B,IAAqC,IAAI8C,SAAS,CAACK,WAAnD,GAAiEL,SAAS,CAACC,UAD7E;AAGEzC,aAAO,CAACC,GAAR,CAAYwD,WAAZ;AACAzD,aAAO,CAACC,GAAR,CAAYuC,SAAS,CAACG,eAAV,GAA4Ba,QAAQ,CAAC,CAAD,CAAhD;AACAxD,aAAO,CAACC,GAAR,CAAYuD,QAAQ,CAAC,CAAD,CAApB;AACF,UAAME,UAAU,GACdL,IAAI,CAACC,KAAL,CAAW,KAAK9D,UAAL,CAAgBC,KAA3B,IAAoC,IAAI+C,SAAS,CAACK,WAAlD,GAAgEL,SAAS,CAACE,SAD5E,CATuB,CAWvB;AACA;;AACA,UAAMiB,QAAQ,GAAG;AACbC,YAAI,EAAE,CAACJ,QAAQ,CAAC,CAAD,CAAR,GAAcE,UAAf,IAA6B,KAAKlE,UAAL,CAAgBC,KADtC;AAEboE,aAAK,EAAE,CAACrB,SAAS,CAACI,cAAV,GAA2BY,QAAQ,CAAC,CAAD,CAAnC,GAAyCE,UAA1C,IAAwD,KAAKlE,UAAL,CAAgBC,KAFlE;AAGbqE,WAAG,EAAE,CAACN,QAAQ,CAAC,CAAD,CAAR,GAAcC,WAAf,IAA8B,KAAKjE,UAAL,CAAgBE,MAHtC;AAIbqE,cAAM,EAAE,CAACvB,SAAS,CAACG,eAAV,GAA4Ba,QAAQ,CAAC,CAAD,CAApC,GAA0CC,WAA3C,IAA0D,KAAKjE,UAAL,CAAgBE,MAJrE;AAKbsE,cAAM,EAAE;AALK,OAAjB,CAbuB,CAqBvB;AACA;AAEA;AAEA;AACA;AAEA;AAEA;;AAEA,aAAOL,QAAP;AACD;;;4BAEOrE,G,EAAK;AACXU,aAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,aAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAKgE,cAAL,CAAoB3E,GAApB;AACAU,aAAO,CAACC,GAAR,CAAY,eAAZ;AACA,WAAKiE,aAAL,CAAmB5E,GAAnB;AACAU,aAAO,CAACC,GAAR,CAAY,cAAZ;AACA,WAAKkE,YAAL;AACD;;;mCAEc7E,G,EAAK;AAChBU,aAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,UAAMmE,UAAU,GAAG,IAAIC,KAAJ,EAAnB;;AACAD,gBAAU,CAACE,MAAX,GAAoB,YAAW;AAC3BhF,WAAG,CAACiF,SAAJ,CAAcH,UAAd,EAA0B,CAAC,GAA3B,EAAgC,CAAC,GAAjC;AACH,OAFD,CAHgB,CAMhB;AACI;AACN;AACA;;AACD;;;mCAEc/D,M,EAAQmE,Q,EAAU;AAC/B,WAAKC,YAAL,CAAkB,UAAAd,QAAQ,EAAI;AAC5B,YAAIA,QAAQ,CAACG,GAAT,KAAiBzD,MAAM,CAAC0D,MAA5B,EAAoC;AAClC,cAAI,CAACJ,QAAQ,CAACK,MAAd,EAAsB;AACpBL,oBAAQ,CAACK,MAAT,GAAkB,IAAlB;AACAhE,mBAAO,CAACC,GAAR,CAAY,QAAZ;AACAuE,oBAAQ;AACT;AACF;AACF,OARD;AASD;;;mCAEc;AACbxE,aAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,WAAKwE,YAAL,CAAkB,UAAUd,QAAV,EAAoB;AACpCA,gBAAQ,CAACG,GAAT,IAAgBtB,SAAS,CAACkC,cAA1B;AACAf,gBAAQ,CAACI,MAAT,IAAmBvB,SAAS,CAACkC,cAA7B;AACD,OAHD,EAFa,CAOb;;AACA,UAAI,KAAKxB,SAAL,CAAe,CAAf,EAAkBY,GAAlB,IAAyB,CAA7B,EAAgC;AAC9B,aAAKZ,SAAL,CAAeyB,KAAf;AACA,YAAMC,IAAI,GAAG,KAAKC,UAAL,CAAgB,CAAhB,EAAmBjB,IAAnB,GAA0BpB,SAAS,CAACM,gBAAjD;AACA,YAAMgC,IAAI,GAAG,KAAK5B,SAAL,CAAe,CAAf,EAAkBY,GAAlB,GAAwBtB,SAAS,CAACM,gBAA/C;AACA,aAAKI,SAAL,CAAe6B,IAAf,CAAoB,KAAK5B,cAAL,CAAoB,CAACyB,IAAD,EAAOE,IAAP,CAApB,CAApB;AACD;AACF;;;kCAEaxF,G,EAAK;AACjBU,aAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,WAAKwE,YAAL,CAAkB,UAAUd,QAAV,EAAoB;AACpC;AACA;AACArE,WAAG,CAACwC,SAAJ,GAAgB,OAAhB,CAHoC,CAIpC;AACA;;AACAxC,WAAG,CAAC0F,QAAJ,CACErB,QAAQ,CAACC,IADX,EAEED,QAAQ,CAACG,GAFX,EAGEtB,SAAS,CAACI,cAHZ,EAIEJ,SAAS,CAACG,eAJZ;AAMD,OAZD;AAaD;;;iCAEY6B,Q,EAAU;AACrBxE,aAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,WAAKiD,SAAL,CAAe+B,OAAf,CAAuBT,QAAQ,CAAC7D,IAAT,CAAc,IAAd,CAAvB;AACD,K,CACD;AACA;;;;iCACaN,M,EAAQ;AACnB;AACAL,aAAO,CAACC,GAAR,CAAY,mBAAZ;;AACA,UAAMiF,QAAQ,GAAG,SAAXA,QAAW,CAACvB,QAAD,EAAWwB,MAAX,EAAsB;AACrCnF,eAAO,CAACC,GAAR,CAAY,UAAZ,EADqC,CAErC;;AACA,YAAMmF,aAAa,GAAGD,MAAM,CAACvB,IAAP,IAAeD,QAAQ,CAACE,KAAxB,IAAiCsB,MAAM,CAACvB,IAAP,IAAeD,QAAQ,CAACC,IAA/E;AACA,YAAMyB,cAAc,GAAGF,MAAM,CAACtB,KAAP,IAAgBF,QAAQ,CAACE,KAAzB,IAAkCsB,MAAM,CAACtB,KAAP,IAAgBF,QAAQ,CAACC,IAAlF;AAEA5D,eAAO,CAACC,GAAR,CAAYkF,MAAZ;AACAnF,eAAO,CAACC,GAAR,CAAY0D,QAAZ;;AACA,YAAI,CAACyB,aAAD,IAAkB,CAACC,cAAvB,EAAuC;AACrC,iBAAO,KAAP,CADqC,CAErC;AACA;AACD,SAZoC,CAarC;;;AACA,YAAMC,kBAAkB,GAAGH,MAAM,CAACrB,GAAP,GAAaH,QAAQ,CAACI,MAAjD;AACA,YAAMwB,eAAe,GAAGJ,MAAM,CAACpB,MAAP,KAAkBJ,QAAQ,CAACG,GAAnD;;AACA,YAAI,CAACyB,eAAL,EAAsB;AACpB,iBAAO,KAAP;AACD;;AAED,eAAO,IAAP;AACD,OArBD;;AAuBA,UAAIC,SAAS,GAAG,KAAhB;AACA,WAAKf,YAAL,CAAkB,UAAAd,QAAQ,EAAI;AAC1B;AACF,YAAIuB,QAAQ,CAACvB,QAAD,EAAWtD,MAAX,CAAZ,EAAgC;AAC9BmF,mBAAS,GAAG,IAAZ;AACAxF,iBAAO,CAACC,GAAR,CAAY0D,QAAZ;AACA3D,iBAAO,CAACC,GAAR,CAAYuF,SAAZ;AACAnF,gBAAM,CAACY,UAAP,CAAkB,IAAlB;AACD,SAP2B,CAQ1B;;AACH,OATD;AAWAjB,aAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,aAAO,CAACC,GAAR,CAAYuF,SAAZ;AACA,aAAOA,SAAP;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;ACrNH;AAEA,IAAMhD,SAAS,GAAG;AAChBiD,SAAO,EAAE,GADO;AAEhBC,YAAU,EAAE,GAFI;AAGhBC,YAAU,EAAE,CAHI;AAIhBC,cAAY,EAAE,GAJE;AAKhBC,cAAY,EAAE,EALE;AAMhBC,eAAa,EAAE;AANC,CAAlB;;IASMxF,M;AACJ,kBAAYd,UAAZ,EAAwB;AAAA;;AACtB,SAAKA,UAAL,GAAkBA,UAAlB;AACA,SAAKmC,CAAL,GAAS,KAAKnC,UAAL,CAAgBC,KAAhB,GAAwB,CAAjC,CAFsB,CAGtB;;AACA,SAAKmC,CAAL,GAAS,GAAT;AACA,SAAKmE,GAAL,GAAW,CAAX;AACD;;;;2BAEM;AACL,WAAKA,GAAL,GAAWvD,SAAS,CAACmD,UAArB;AACD;;;2BAEM;AACL;AACA;AACA;AACA,WAAKI,GAAL,GAAW,CAAC,CAAD,GAAKvD,SAAS,CAACkD,UAA1B,CAJK,CAKL;AACD;;;iCAEkB;AAAA;;AAAA,UAARM,GAAQ,uEAAJ,EAAI;;AACjB,UAAIA,GAAG,KAAK,OAAZ,EAAqB;AACnB,aAAKrE,CAAL,IAAU,EAAV;AACD,OAFD,MAEO,IAAIqE,GAAG,KAAK,MAAZ,EAAoB;AACzB,aAAKrE,CAAL,IAAU,EAAV;AACD,OAFM,MAEA,IAAIqE,GAAG,KAAK,IAAZ,EAAkB;AACvB,aAAKC,IAAL,GADuB,CAEvB;AACA;AACA;;AACAC,mBAAW,CAAC,YAAM;AAChB,eAAI,CAACtE,CAAL,IAAU,KAAI,CAACmE,GAAf;AAEA,cAAI,KAAI,CAACnE,CAAL,GAAU,KAAI,CAACN,MAAL,CAAYwC,GAAZ,GAAkB,GAAhC,EAAsC,KAAI,CAAClC,CAAL,GAAS,KAAI,CAACN,MAAL,CAAYwC,GAAZ,GAAkB,GAA3B;AACvC,SAJU,EAIR,EAJQ,CAAX,CALuB,CAUvB;AACA;AACA;AACA;AACD,OAnBgB,CAoBjB;AACE;AACA;AACF;AAEA;AACA;AACA;AACA;;;AACA,WAAKiC,GAAL,IAAYvD,SAAS,CAACiD,OAAtB,CA7BiB,CA8BjB;AACA;;AACA,UAAIpC,IAAI,CAAC8C,GAAL,CAAS,KAAKJ,GAAd,IAAqBvD,SAAS,CAACoD,YAAnC,EAAiD;AAC/C;AACA,YAAI,KAAKG,GAAL,GAAW,CAAf,EAAkB;AAChB,eAAKA,GAAL,GAAWvD,SAAS,CAACoD,YAArB;AACD,SAFD,MAEO;AACL,eAAKG,GAAL,GAAWvD,SAAS,CAACoD,YAAV,GAAyB,CAAC,CAArC;AACD;AACF;AACF;;;4BAEOtG,G,EAAK;AACX,WAAK2B,UAAL;AACA,WAAKmF,UAAL,CAAgB9G,GAAhB;AACD;;;+BAEUA,G,EAAK;AACdA,SAAG,CAACwC,SAAJ,GAAgB,QAAhB;AACAxC,SAAG,CAAC0F,QAAJ,CAAa,KAAKrD,CAAlB,EAAqB,KAAKC,CAA1B,EAA6BY,SAAS,CAACqD,YAAvC,EAAqDrD,SAAS,CAACsD,aAA/D;AACD;;;6BAEQ;AACP,aAAO;AACLlC,YAAI,EAAE,KAAKjC,CADN;AAELkC,aAAK,EAAE,KAAKlC,CAAL,GAASa,SAAS,CAACqD,YAFrB;AAGL/B,WAAG,EAAE,KAAKlC,CAHL;AAILmC,cAAM,EAAE,KAAKnC,CAAL,GAASY,SAAS,CAACsD;AAJtB,OAAP;AAMD;;;kCAGa;AACZ;AACA,UAAMO,cAAc,GAClB,KAAKzE,CAAL,GAASY,SAAS,CAACsD,aAAnB,GAAmC,KAAKtG,UAAL,CAAgBE,MADrD;AAEA,aAAO2G,cAAP;AACD;;;gCAEW;AACV,UAAMC,IAAI,GAAG,IAAInH,6CAAJ,EAAb;AAED;;;;;;AAGYmB,qEAAf,E","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","export default class Ball {\n    constructor() {\n        // this.ctx = canvas.getContext(\"2d\");\n        // this.dimensions = { width: , height: }\n    }\n\n    \n}","import Player from \"./player\";\nimport Level from \"./level\";\n\nexport default class DoodleJump {\n  constructor(canvas) {\n    this.ctx = canvas.getContext(\"2d\");\n    this.dimensions = { width: canvas.width, height: canvas.height };\n    // console.log((2/3) * canvas.width)\n    // console.log((4/5) * canvas.height)\n\n    this.balls = [];\n    this.hoops = [];\n    this.defenders = [];\n\n    this.registerEvents();\n    this.restart();\n    console.log('constructor')\n  }\n\n  play() {\n    console.log('play')\n    this.running = true;\n\n    // setInterval(() => this.keyStroke({ keyCode: 38 }), 1000)\n    this.animate();\n  }\n\n  restart() {\n    console.log('restart')\n    this.running = false;\n    this.score = 0;\n    this.player = new Player(this.dimensions);\n    this.level = new Level(this.dimensions);\n\n    this.animate();\n  }\n\n  registerEvents() {\n    console.log('registerEvents')\n    this.boundKeyStrokeHandler = this.keyStroke.bind(this);\n    document.addEventListener(\"keydown\", this.boundKeyStrokeHandler);\n  }\n\n  keyStroke(e) {\n    console.log('keyStroke')\n    let keyCode = e.keyCode;\n    // console.log(keyCode);\n    if (!this.running) this.play();\n\n    switch (keyCode) {\n      case 32:\n        // this.player.shootBall()\n        break;\n      case 37:\n        // console.log('l')\n        this.player.movePlayer(\"left\");\n        break;\n      case 38:\n        this.player.movePlayer(\"up\");\n        break;\n      case 39:\n        // console.log('r')\n        this.player.movePlayer(\"right\")\n        break;\n      case 40:\n        this.player.movePlayer(\"down\");\n        break;\n      default:\n        // console.log('eslse')\n        break;\n    }\n\n    // this.player.jump();\n  }\n\n  gameOver() {\n    return (\n      this.player.outOfBounds()\n    );\n  }\n\n  //this is the key method of gaming action\n  //animate tells the game to advance one bit\n  //the bird moves, the level moves\n  //everything is redrawn to the screen\n  animate() {\n    console.log('animate')\n    //first we move and draw the level\n    console.log('animate level')\n    this.level.animate(this.ctx);\n    //then we move and draw the bird\n    console.log('animate player')\n    this.player.animate(this.ctx);\n    //then we check to see if the game is over and let the player know\n    if (this.gameOver()) {\n      console.log('game over')\n      alert(this.score);\n      this.restart();\n    }\n\n    // //we see if they have scored a point by passing a platform\n    this.level.landedPlatform(this.player.bounds(), () => {\n      this.score += 1;\n      this.player.movePlayer(\"up\");\n      console.log(this.score);\n    });\n\n    if (this.level.collidesWith(this.player.bounds())) {\n      console.log(\"if collidesWith\");\n      this.player.movePlayer(\"up\");\n    }\n\n    //and draw the score\n    console.log('draw score')\n    this.drawScore();\n\n    //if the game is NOT running, we do not animate the next frame\n    if (this.running) {\n      console.log('if running...requestAnimationFrame')\n      //This calls this function again, after around 1/60th of a second\n      requestAnimationFrame(this.animate.bind(this));\n    }\n  }\n\n  drawScore() {\n    console.log('draw score')\n    //loc will be the location\n    const loc = { x: ( 5 * this.dimensions.width) / 6, y: this.dimensions.height / 6 };\n    this.ctx.font = \"bold 50pt serif\";\n    this.ctx.fillStyle = \"white\";\n    this.ctx.fillText(this.score, loc.x, loc.y);\n    this.ctx.strokeStyle = \"black\";\n    this.ctx.lineWidth = 2;\n    this.ctx.strokeText(this.score, loc.x, loc.y);\n  }\n}\n// ","// const Game = require(\"./game\");\n// const GameView = require(\"./game_view\");\n// import Game from '../game';\n// import Player from \"../player\";\n// import MovingObject from \"./moving_object\"\n\nimport Game from './game';\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const game_canv = document.getElementById(\"game-canvas\");\n  const bg_canv = document.getElementById(\"bg-canvas\");\n  // canvasEl.width = Game.DIM_X;\n  // canvasEl.height = Game.DIM_Y;\n  // const ctx = canvasEle.getContext(\"2d\");\n  const game = new Game(game_canv, bg_canv);\n  // new GameView(game, ctx).start();\n  // console.log(canvasEle)\n  // console.log(\n    // 'webapck is working'\n  // )\n\n  // window.MovingObject = MovingObject;\n});\n\n\n\n// class DoodleJump {\n//   constructor(canvas) {\n//     this.ctx = canvas.getContext(\"2d\");\n//     this.dimensions = { width: canvas.width, height: canvas.height };\n//     this.registerEvents();\n//     this.restart();\n//   }\n\n//   play() {\n//     this.running = true;\n//     this.animate();\n//     this.player.jump();\n//   }\n\n//   restart() {\n//     this.running = false;\n//     this.score = 0;\n//     this.player = new Player(this.dimensions);\n//     this.level = new Level(this.dimensions);\n\n//     this.animate();\n//   }\n\n//   registerEvents() {\n//     this.boundKeyStrokeHandler = this.keyStroke.bind(this);\n//     this.ctx.canvas.addEventListener(\"keydown\", this.boundKeyStrokeHandler);\n//   }\n\n//   keyStroke(e) {\n//     let keyCode = e.keyCode;\n\n//     if (!this.running) this.play();\n\n//     switch (keyCode) {\n//       case 37:\n//         this.player.movePlayer(\"left\");\n//         break;\n//       case 39:\n//         this.player.movePlayer(\"right\");\n//       default:\n//         break;\n//     }\n//     // this.player.jump();\n//   }\n\n//   gameOver() {\n//     return (\n//       this.level.collidesWith(this.player.bounds()) || this.player.outOfBounds()\n//     );\n//   }\n\n//   //this is the key method of gaming action\n//   //animate tells the game to advance one bit\n//   //the bird moves, the level moves\n//   //everything is redrawn to the screen\n//   animate() {\n//     //first we move and draw the level\n//     this.level.animate(this.ctx);\n//     //then we move and draw the bird\n//     this.player.animate(this.ctx);\n//     //then we check to see if the game is over and let the player know\n//     if (this.gameOver()) {\n//       alert(this.score);\n//       this.restart();\n//     }\n\n//     //we see if they have scored a point by passing a platform\n//     this.level.landedPlatform(this.player.bounds(), () => {\n//       this.score += 1;\n//       console.log(this.score);\n//     });\n\n//     //and draw the score\n//     this.drawScore();\n\n//     //if the game is NOT running, we do not animate the next frame\n//     if (this.running) {\n//       //This calls this function again, after around 1/60th of a second\n//       requestAnimationFrame(this.animate.bind(this));\n//     }\n//   }\n\n//   drawScore() {\n//     //loc will be the location\n//     const loc = {\n//       x: (5 * this.dimensions.width) / 6,\n//       y: this.dimensions.height / 6,\n//     };\n//     this.ctx.font = \"bold 50pt serif\";\n//     this.ctx.fillStyle = \"white\";\n//     this.ctx.fillText(this.score, loc.x, loc.y);\n//     this.ctx.strokeStyle = \"black\";\n//     this.ctx.lineWidth = 2;\n//     this.ctx.strokeText(this.score, loc.x, loc.y);\n//   }\n// }\n\n// const LEVEL_CONSTANTS = {\n//   //   PLATFORM_SPEED: 2,\n//   GAP_HEIGHT: 175,\n//   GAP_WIDTH: 60,\n//   PLATFORM_HEIGHT: 25,\n//   PLATFORM_WIDTH: 75,\n//   EDGE_BUFFER: 50,\n//   PLATFORM_SPACING: [100, 100],\n//   //   WARM_UP_SECONDS: 1,\n// };\n\n// class Level {\n//   constructor(dimensions) {\n//     this.dimensions = dimensions;\n\n//     const firstPlatformLocation = [\n//       this.dimensions.height / 5,\n//       this.dimensions.width / 3,\n//     ];\n//     //   LEVEL_CONSTANTS.WARM_UP_SECONDS * 60 * LEVEL_CONSTANTS.PLATFORM_SPEED;\n\n//     this.platforms = [\n//       this.randomPlatform(firstPlatformLocation),\n//       this.randomPlatform(\n//         firstPlatformLocation[0] + LEVEL_CONSTANTS.PLATFORM_SPACING,\n//         firstPlatformLocation[1] + LEVEL_CONSTANTS.PLATFORM_SPACING\n//       ),\n//       this.randomPlatform(\n//         firstPlatformLocation[0] + LEVEL_CONSTANTS.PLATFORM_SPACING * 2,\n//         firstPlatformLocation[1] + LEVEL_CONSTANTS.PLATFORM_SPACING * 2\n//       ),\n//     ];\n//   }\n\n//   randomPlatform(location) {\n//     const heightRange =\n//       this.dimensions.height - 2 * LEVEL_CONSTANTS.EDGE_BUFFER - LEVEL_CONSTANTS.GAP_HEIGHT;\n//     const spaceRange =\n//       this.dimensions.width - 2 * LEVEL_CONSTANTS.EDGE_BUFFER - LEVEL_CONSTANTS.GAP_WIDTH;\n//     // const gapTop = Math.random() * heightRange + LEVEL_CONSTANTS.EDGE_BUFFER;\n//     // const gapSide = Math.random() * widthRange + LEVEL_CONSTANTS.EDGE_BUFFER;\n//     const platform = {\n//       left: location[0],\n//       right: LEVEL_CONSTANTS.PLATFORM_WIDTH + location[0],\n//       top: location[1],\n//       bottom: LEVEL_CONSTANTS.PLATFORM_HEIGHT + location[1],\n//       landed: false,\n//     };\n//     return platform;\n//   }\n\n//   animate(ctx) {\n//     this.drawBackground(ctx);\n//     this.movePlatforms();\n//     this.drawPlatforms(ctx);\n//   }\n\n//   drawBackground(ctx) {\n//     let background = new Image();\n//     background.src =\n//       \"https://cdn3.vectorstock.com/i/1000x1000/15/12/background-of-basketball-court-vector-7441512.jpg\";\n//     background.onload = function () {\n//       ctx.drawImage(background, 0, 0);\n//     };\n//     // ctx.fillStyle = \"skyblue\";\n//     // ctx.fillRect(0, 0, this.dimensions.width, this.dimensions.height);\n//   }\n\n//   landedPlatform(player, callback) {\n//     this.eachPlatform((platform) => {\n//       if (platform.top < player.bottom) {\n//         if (!platform.landed) {\n//           platform.landed = true;\n//           callback();\n//         }\n//       }\n//     });\n//   }\n\n//   movePlatform() {\n//     this.eachPlatform(function (platform) {\n//       platform.top -= LEVEL_CONSTANTS.PLATFORM_SPEED;\n//       platform.bottom -= LEVEL_CONSTANTS.PLATFORM_SPEED;\n//     });\n\n//     //if a platform has left the screen add a new one to the end\n//     if (this.platforms[0].top <= 0) {\n//       this.platforms.shift();\n//       const newX = this.platformss[1].left + LEVEL_CONSTANTS.PLATFORM_SPACING;\n//       const newY = this.platforms[1].top + LEVEL_CONSTANTS.PLATFORM_SPACING;\n//       this.platforms.push(this.randomPlatform([newX, newY]));\n//     }\n//   }\n\n//   drawPlatforms(ctx) {\n//     this.eachPlatform(function (platform) {\n//       ctx.fillStyle = \"green\";\n\n//       //draw platform\n//       ctx.fillRect(\n//         platform.left,\n//         platform.top,\n//         LEVEL_CONSTANTS.Platform_WIDTH,\n//         platform.top - platform.bottom\n//       );\n//     });\n//   }\n\n//   eachPlatform(callback) {\n//     this.platforms.forEach(callback.bind(this));\n//   }\n//   //This method shall return true if the bird passed in is currently\n//   //colliding with any platform.\n//   collidesWith(player) {\n//     //this function returns true if the the rectangles overlap\n//     const _overlap = (platform, object) => {\n//       //check that they don't overlap in the x axis\n//       if (\n//         (object.left < platform.right && object.left > platform.left) ||\n//         (platform.right < object.right && platform.left < object.right)\n//       ) {\n//         if (object.bottom < platform.top) return true;\n//         return false;\n//       }\n//       //check that they don't overlap in the y axis\n//       //   if (objecttop > platform.bottom || objectbottom > platform.top) {\n//       //     return false;\n//       //   }\n//       //   return true;\n//     };\n//     let collision = false;\n//     this.eachPlatform((platform) => {\n//       //check if the bird is overlapping (colliding) with either platform\n//       if (_overlap(platform, player)) collision = true;\n//       // _overlap(platform.bottomPlatform, player)\n//     });\n//     return collision;\n//   }\n// }\n\n// const PLAYER_CONSTANTS = {\n//   GRAVITY: 0.4,\n//   JUMP_SPEED: 8,\n//   TERMINAL_VEL: 12,\n//   PLAYER_WIDTH: 40,\n//   PLAYER_HEIGHT: 30,\n// };\n\n// class Player {\n//   constructor(dimensions) {\n//     this.dimensions = dimensions;\n//     this.x = this.dimensions.width / 3;\n//     // this.y = this.dimensions.height / 2;\n//     this.y = 0;\n//     this.vel = 0;\n//   }\n\n//   jump() {\n//     //if this were a more realistic player simulation, we would be adding to the velocity\n//     //instead of just assigning it outright\n//     //to make the experience more fun and 'bouncy' we just set it directly\n//     this.vel = -1 * PLAYER_CONSTANTS.JUMP_SPEED;\n//   }\n\n//   movePlayer(dir = \"\") {\n//     if (dir === \"right\") {\n//       this.x += 10;\n//     } else if (dir === \"left\") {\n//       this.x -= 10;\n//     }\n//     //for each frame, the Player should move by it's current velocity\n//     //velocity is 'pixels per frame', so each frame it should update position by vel\n//     this.y += this.vel;\n//     //the acceleration of gravity is in pixels per second per second\n//     //so each second, it changes the velocity by whatever the gravity PLAYER_constant is\n//     this.vel += PLAYER_CONSTANTS.GRAVITY;\n//     //we set a 'terminal velocity', a maximum speed the Player can travel\n//     //this keeps the game from becoming too wild because the Player is moving too fast to control\n//     if (Math.abs(this.vel) > PLAYER_CONSTANTS.TERMINAL_VEL) {\n//       //if the terminal velocity is exceeded, we set it to the terminal velicty\n//       if (this.vel > 0) {\n//         this.vel = PLAYER_CONSTANTS.TERMINAL_VEL;\n//       } else {\n//         this.vel = PLAYER_CONSTANTS.TERMINAL_VEL * -1;\n//       }\n//     }\n//   }\n\n//   animate(ctx) {\n//     this.movePlayer();\n//     this.drawPlayer(ctx);\n//   }\n\n//   drawPlayer(ctx) {\n//     ctx.fillStyle = \"yellow\";\n//     ctx.fillRect(\n//       this.x,\n//       this.y,\n//       PLAYER_CONSTANTS.PLAYER_WIDTH,\n//       PLAYER_CONSTANTS.PLAYER_HEIGHT\n//     );\n//   }\n\n//   bounds() {\n//     return {\n//       left: this.x,\n//       right: this.x + PLAYER_CONSTANTS.PLAYER_WIDTH,\n//       top: this.y,\n//       bottom: this.y + PLAYER_CONSTANTS.PLAYER_HEIGHT,\n//     };\n//   }\n\n//   outOfBounds() {\n//     // const aboveTheTop = this.y < 0;\n//     const belowTheBottom =\n//       this.y + PLAYER_CONSTANTS.PLAYER_HEIGHT > this.dimensions.height;\n//     return belowTheBottom;\n//   }\n// }","const CONSTANTS = {\n//   PLATFORM_SPEED: 2,\n  GAP_HEIGHT: 175,\n  GAP_WIDTH: 60,\n  PLATFORM_HEIGHT: 20,\n  PLATFORM_WIDTH: 100,\n  EDGE_BUFFER: 50,\n  PLATFORM_SPACING: [100, 100],\n//   WARM_UP_SECONDS: 1,\n};\n\n// need to push\n\nexport default class Level {\n  constructor(dimensions) {\n    console.log('level constructor')\n    this.dimensions = dimensions;\n\n    const firstPlatformLocation = [\n        // this.dimensions.height,\n        // 10,\n        // this.dimensions.width,\n        // this.dimensions.height\n        \n        (2 * this.dimensions.width) / 3,\n        (4 * this.dimensions.height) / 5\n    ]\n    //   CONSTANTS.WARM_UP_SECONDS * 60 * CONSTANTS.PLATFORM_SPEED;\n    const int = this.getRandomInt\n\n    console.log(firstPlatformLocation)\n\n    this.platforms = [\n      this.randomPlatform(firstPlatformLocation),\n      this.randomPlatform(\n        [\n          firstPlatformLocation[0] - CONSTANTS.PLATFORM_SPACING[0] * int(3),\n          firstPlatformLocation[1] - CONSTANTS.PLATFORM_SPACING[1] * int(3)\n        ]\n      ),\n      this.randomPlatform(\n        [\n          firstPlatformLocation[0] - CONSTANTS.PLATFORM_SPACING[0] * int(4),\n          firstPlatformLocation[1] - CONSTANTS.PLATFORM_SPACING[1] * int(4)\n        ]\n      ),\n      this.randomPlatform(\n        [\n          firstPlatformLocation[0] - CONSTANTS.PLATFORM_SPACING[0] * int(5),\n          firstPlatformLocation[1] - CONSTANTS.PLATFORM_SPACING[1] * int(5)\n        ]\n      ),\n    ];\n    console.log('con platforms:', this.platforms)\n  }\n\n  getRandomInt(max) {\n    const int = Math.floor(Math.random() * Math.floor(max));\n\n    if (int === 0) return 1;\n    return int;\n  }\n\n  randomPlatform(location) {\n    console.log('randomPlatform')\n    console.log('lcoation', location)\n    const heightRange =\n      Math.floor(this.dimensions.height) - 2 * CONSTANTS.EDGE_BUFFER - CONSTANTS.GAP_HEIGHT;\n\n      console.log(heightRange)\n      console.log(CONSTANTS.PLATFORM_HEIGHT + location[1])\n      console.log(location[1])\n    const spaceRange =\n      Math.floor(this.dimensions.width) - 2 * CONSTANTS.EDGE_BUFFER - CONSTANTS.GAP_WIDTH;\n    // const gapTop = Math.random() * heightRange + CONSTANTS.EDGE_BUFFER;\n    // const gapSide = Math.random() * widthRange + CONSTANTS.EDGE_BUFFER;\n    const platform = {\n        left: (location[0] + spaceRange) % this.dimensions.width,\n        right: (CONSTANTS.PLATFORM_WIDTH + location[0] + spaceRange) % this.dimensions.width,\n        top: (location[1] + heightRange) % this.dimensions.height,\n        bottom: (CONSTANTS.PLATFORM_HEIGHT + location[1] + heightRange) % this.dimensions.height,\n        landed: false,\n    };\n\n    // console.log(location[0] + CONSTANTS.PLATFORM_WIDTH)\n    // console.log(CONSTANTS.PLATFORM_WIDTH + location[0]);\n\n    // console.log(CONSTANTS.PLATFORM_HEIGHT)\n\n    // console.log('left', platform.left)\n    // console.log('right', platform.right);\n\n    // console.log('top', platform.top);\n\n    // console.log('bottom', platform.bottom);\n\n    return platform;\n  }\n\n  animate(ctx) {\n    console.log('level animate')\n    console.log('drawBackground')\n    this.drawBackground(ctx)\n    console.log(\"drawPlatforms\");\n    this.drawPlatforms(ctx);\n    console.log(\"movePlatform\");\n    this.movePlatform();\n  }\n\n  drawBackground(ctx) {\n      console.log('this.drawBackground')\n      const background = new Image();\n      background.onload = function() {\n          ctx.drawImage(background, -100, -110)\n      }\n      // background.src =\n          // \"https://cdn3.vectorstock.com/i/1000x1000/15/12/background-of-basketball-court-vector-7441512.jpg\";\n    // ctx.fillStyle = \"skyblue\";\n    // ctx.fillRect(0, 0, this.dimensions.width, this.dimensions.height);\n  }\n\n  landedPlatform(player, callback) {\n    this.eachPlatform(platform => {\n      if (platform.top === player.bottom) {\n        if (!platform.landed) {\n          platform.landed = true;\n          console.log('landed')\n          callback();\n        }\n      }\n    });\n  }\n\n  movePlatform() {\n    console.log('this.movePlatform')\n    this.eachPlatform(function (platform) {\n      platform.top -= CONSTANTS.PLATFORM_SPEED;\n      platform.bottom -= CONSTANTS.PLATFORM_SPEED;\n    });\n\n    //if a platform has left the screen add a new one to the end\n    if (this.platforms[0].top <= 0) {\n      this.platforms.shift();\n      const newX = this.platformss[1].left + CONSTANTS.PLATFORM_SPACING;\n      const newY = this.platforms[1].top + CONSTANTS.PLATFORM_SPACING;\n      this.platforms.push(this.randomPlatform([newX, newY]));\n    }\n  }\n\n  drawPlatforms(ctx) {\n    console.log('this.drawPlatforms');\n    this.eachPlatform(function (platform) {\n      // console.log(platform)\n      // ctx.fillStyle = \"#6a0dad\";\n      ctx.fillStyle = \"green\"\n      // console.log(ctx)\n      //draw platform\n      ctx.fillRect(\n        platform.left,\n        platform.top,\n        CONSTANTS.PLATFORM_WIDTH,\n        CONSTANTS.PLATFORM_HEIGHT\n      );\n    });\n  }\n\n  eachPlatform(callback) {\n    console.log('this.eachPlatform');\n    this.platforms.forEach(callback.bind(this));\n  }\n  //This method shall return true if the bird passed in is currently\n  //colliding with any platform.\n  collidesWith(player) {\n    //this function returns true if the the rectangles overlap\n    console.log('this.collidesWith')\n    const _overlap = (platform, object) => {\n      console.log('_overlap')\n      //check that they don't overlap in the x axis\n      const objLeftOnPlat = object.left <= platform.right && object.left >= platform.left;\n      const objRightOnPlat = object.right <= platform.right && object.right >= platform.left;\n\n      console.log(object)\n      console.log(platform)\n      if (!objLeftOnPlat && !objRightOnPlat) {\n        return false;\n        // if (object.bottom < platform.top) return true;\n        // return false;\n      }\n      //check that they don't overlap in the y axis\n      const objTopAbovePlatBot = object.top > platform.bottom;\n      const objBotOnPlatTop = object.bottom === platform.top;\n      if (!objBotOnPlatTop) {\n        return false;\n      }\n\n      return true;\n    };\n\n    let collision = false;\n    this.eachPlatform(platform => {\n        //check if the bird is overlapping (colliding) with either platform\n      if (_overlap(platform, player)) {\n        collision = true;\n        console.log(platform)\n        console.log(collision)\n        player.movePlayer(\"up\")\n      }\n        // _overlap(platform.bottomPlatform, player)\n    });\n\n    console.log('collision:')\n    console.log(collision)\n    return collision;\n  }\n}\n\n","import Ball from './ball'\n\nconst CONSTANTS = {\n  GRAVITY: 0.4,\n  JUMP_SPEED: 100,\n  FALL_SPEED: 1,\n  TERMINAL_VEL: 7.5,\n  PLAYER_WIDTH: 40,\n  PLAYER_HEIGHT: 40,\n};\n\nclass Player {\n  constructor(dimensions) {\n    this.dimensions = dimensions;\n    this.x = this.dimensions.width / 3;\n    // this.y = this.dimensions.height / 2;\n    this.y = 760;\n    this.vel = 0;\n  }\n\n  fall() {\n    this.vel = CONSTANTS.FALL_SPEED\n  }\n\n  jump() {\n    //if this were a more realistic player simulation, we would be adding to the velocity\n    //instead of just assigning it outright\n    //to make the experience more fun and 'bouncy' we just set it directly\n    this.vel = -1 * CONSTANTS.JUMP_SPEED;\n    // this.movePlayer()\n  }\n  \n  movePlayer(dir=\"\") {\n    if (dir === \"right\") {\n      this.x += 25\n    } else if (dir === \"left\") {\n      this.x -= 25\n    } else if (dir === \"up\") {\n      this.jump()\n      // console.log(this.y)\n      // let max_height = this.y + this.vel\n      // this.y = max_height;\n      setInterval(() => {\n        this.y += this.vel\n        \n        if (this.y > (this.bounds.top + 100)) this.y = this.bounds.top + 100\n      }, 30);\n      // // console.log(this.y)\n      // if (this.y === (max_height)) {\n      //   this.fall();\n      //   while (!this.outOfBounds) this.y += this.vel;\n    }\n    // } else if (dir === \"down\") {\n      // this.fall()\n      // setInterval(() => this.y += this.vel, 30);\n    // }\n\n    //for each frame, the Player should move by it's current velocity\n    //velocity is 'pixels per frame', so each frame it should update position by vel\n    //the acceleration of gravity is in pixels per second per second\n    //so each second, it changes the velocity by whatever the gravity constant is\n    this.vel += CONSTANTS.GRAVITY;\n    //we set a 'terminal velocity', a maximum speed the Player can travel\n    //this keeps the game from becoming too wild because the Player is moving too fast to control\n    if (Math.abs(this.vel) > CONSTANTS.TERMINAL_VEL) {\n      //if the terminal velocity is exceeded, we set it to the terminal velicty\n      if (this.vel > 0) {\n        this.vel = CONSTANTS.TERMINAL_VEL;\n      } else {\n        this.vel = CONSTANTS.TERMINAL_VEL * -1;\n      }\n    }\n  }\n\n  animate(ctx) {\n    this.movePlayer();\n    this.drawPlayer(ctx);\n  }\n\n  drawPlayer(ctx) {\n    ctx.fillStyle = \"yellow\";\n    ctx.fillRect(this.x, this.y, CONSTANTS.PLAYER_WIDTH, CONSTANTS.PLAYER_HEIGHT);\n  }\n\n  bounds() {\n    return {\n      left: this.x,\n      right: this.x + CONSTANTS.PLAYER_WIDTH,\n      top: this.y,\n      bottom: this.y + CONSTANTS.PLAYER_HEIGHT,\n    };\n  }\n\n\n  outOfBounds() {\n    // const aboveTheTop = this.y < 0;\n    const belowTheBottom =\n      this.y + CONSTANTS.PLAYER_HEIGHT > this.dimensions.height;\n    return belowTheBottom;\n  }\n\n  shootBall() {\n    const ball = new Ball()\n\n  }\n}\n\nexport default Player;"],"sourceRoot":""}